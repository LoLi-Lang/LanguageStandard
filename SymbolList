LoLi Standard Symbol List

Types:                      Identifier
Object                      :OBJ
|---Number                  :NUM
    |---Integer             :INT
    |---Float               :FLT
    |---Ratio               :RAT
|---Symbol                  :SYM
|---Keyword                 :KEY
    |---Boolean             :BOOL
|---Function                :FN
    |---Lambda              :LAMBDA
    |---Primitve Procedure  :PROC
|---Cons                    :CONS
|---Character               :CHAR
|---String                  :STR

The type will be denoted as:
:TYPE1 -> :TYPE2 -> ... -> OBJ -> TYPEn
which means:
(\\ :TYPEn ( (ARG1 :TYPE1) (ARG2 :TYPE2) ... (ARGn-1 :TYPEn-1) ) EXP)
and:
[:TYPE]
which means:
List of objects of TYPE
and:
[:TYPE1 -> :TYPE2 -> ... -> :TYPEn]
means:
( (OBJ1 OBJ2 ... OBJn) ... )

Standard Symbols:
Symbol:     Type ID:
T           :SYM

NIL         :SYM

:TRUE       :BOOL

:FALSE      :BOOL

DEF         :SYM -> :OBJ -> :OBJ
    (DEF SYM VALUE) => VALUE or ERROR

DEFT        :SYM -> :OBJ -> :KEY -> :OBJ
    (DEF SYM VALUE :TYPE) => VALUE or ERROR

SET!        :SYM -> :OBJ -> :OBJ
    (SET! SYM VALUE) => VALUE or ERROR

SETT!        :SYM -> :OBJ -> :KEY -> :OBJ
    (SETT! SYM VALUE :TYPE) => VALUE or ERROR

\\          :KEY -> [:SYM -> :KEY] -> :OBJ -> :LAMBDA
    (\\ :TYPE (ARGS) EXP) => LAMBDA EXPRESSION

WITH        :SYM -> :OBJ -> :OBJ -> :OBJ
    (WITH SYM VALUE EXP) => RETURN OF EXP

LET         [:SYM -> :OBJ] -> :OBJ -> :OBJ
    (LET (BINDS) EXP) => RETURN OF EXP

QUOTE       :OBJ -> :OBJ
    (QUOTE OBJ) => OBJ

SAY         :SYM -> :KEY -> :OBJ -> :OBJ
    (SAY SYM :TYPE EXP) => RETURN OF EXP

ASSERT      [:SYM -> :KEY] -> :OBJ -> :OBJ
    (ASSERT (TYPE BINDS) EXP) => RETURN OF EXP

TYPE-OF     :SYM -> :SYM -> :OBJ -> :OBJ
    (TYPE-OF SYM1 SYM2 EXP) => RETURN OF EXP
    
TYPE-OF-R   [:SYM -> :SYM] -> :OBJ -> :OBJ
    (TYPE-OF ((SYM1 SYM2) (SYM3 SYM4) ... (SYMn SYMn+1)) EXP) => RETURN OF EXP

MAP         :FN -> :CONS -> :CONS
    (MAP FN LST) -> List of result

FOLD        :FN -> :CONS -> :OBJ
    (FOLD FN LST) => Result

FOLDR       :FN -> :CONS -> :OBJ
    (FOLDR FN LST) => Result

CONS        :OBJ -> :OBJ -> :CONS
    (CONS HEAD TAIL) => Cons Structure

HEAD        :CONS -> :OBJ
    (HEAD CONS) => Head

TAIL        :CONS -> :OBJ
    (TAIL CONS) => TAIL

LIST        :OBJ -> :OBJ -> ... -> :OBJ -> :CONS
    (LIST OBJ1 OBJ2 ... OBJn) => List
